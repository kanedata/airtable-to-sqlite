[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "airtable-to-sqlite"
dynamic = ["version"]
description = 'Export Airtable bases to an sqlite database'
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = []
authors = [{ name = "David Kane", email = "david@dkane.net" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "click",
  "pyairtable==2.2.*",
  "python-dotenv",
  "diskcache",
  "sqlite-utils",
  "tqdm",
]

[project.urls]
Documentation = "https://github.com/kanedata/airtable-to-sqlite#readme"
Issues = "https://github.com/kanedata/airtable-to-sqlite/issues"
Source = "https://github.com/kanedata/airtable-to-sqlite"

[project.scripts]
airtable-to-sqlite = "airtable_to_sqlite.cli:airtable_to_sqlite"

[tool.hatch.version]
path = "src/airtable_to_sqlite/__about__.py"

[tool.hatch.envs.default]
dependencies = ["coverage[toml]>=6.5", "pytest", "pytest-mock"]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = ["- coverage combine", "coverage report"]
cov = ["test-cov", "cov-report"]
cov-fail = ["test-cov", "- coverage combine", "coverage report --fail-under=95"]
cov-html = [
  "test-cov",
  "- coverage combine",
  "coverage report",
  "coverage html",
  "python -m http.server -d htmlcov",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = ["mypy>=1.0.0", "ruff>=0.1.11"]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/airtable_to_sqlite tests}"
style = ["ruff {args:.}", "ruff format --check --diff {args:.}"]
fmt = ["ruff format {args:.}", "ruff --fix {args:.}", "style"]
all = ["style", "typing"]

[tool.mypy]
ignore_missing_imports = true

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
  "ISC001",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["airtable_to_sqlite"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["airtable_to_sqlite", "tests"]
branch = true
parallel = true
omit = ["src/airtable_to_sqlite/__about__.py"]

[tool.coverage.paths]
airtable_to_sqlite = [
  "src/airtable_to_sqlite",
  "*/airtable-to-sqlite/src/airtable_to_sqlite",
]
tests = ["tests", "*/airtable-to-sqlite/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
